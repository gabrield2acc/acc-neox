name: iOS Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  XCODE_VERSION: '16.0'
jobs:
  build-and-deploy:
    runs-on: macos-15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: |
        # List available Xcode versions first
        echo "Available Xcode versions:"
        ls -la /Applications/Xcode*.app 2>/dev/null || echo "No Xcode versions found"
        
        # Use Xcode 16 for iOS 18 SDK requirement
        if [ -d "/Applications/Xcode_16.0.app" ]; then
          echo "Using Xcode 16.0"
          sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
        elif [ -d "/Applications/Xcode_16.1.app" ]; then
          echo "Using Xcode 16.1"
          sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
        elif [ -d "/Applications/Xcode_16.app" ]; then
          echo "Using Xcode 16"
          sudo xcode-select -s /Applications/Xcode_16.app/Contents/Developer
        else
          echo "Using default Xcode (should be Xcode 16+ on macos-15)"
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        fi
      
    - name: Show Xcode version
      run: xcodebuild -version
      
    - name: Install iOS platforms and components
      run: |
        echo "Installing iOS platforms for Xcode 16..."
        # Install iOS 18.0 simulator and platforms if available
        sudo xcodebuild -runFirstLaunch || echo "First launch already completed"
        
        # Force download and install all iOS platforms with enhanced installation
        echo "Downloading iOS 18.0 platform components..."
        
        # Try multiple installation approaches for iOS 18.0 platform
        sudo xcodebuild -downloadAllPlatforms || echo "Download all platforms failed, trying individual downloads"
        
        # Specific iOS 18.0 platform installation attempts
        echo "Attempting specific iOS 18.0 platform installation..."
        sudo xcodebuild -downloadPlatform iOS -version 18.0 || echo "iOS 18.0 download failed, trying alternatives"
        sudo xcodebuild -downloadPlatform iOSSimulator -version 18.0 || echo "iOS 18.0 Simulator download failed"
        
        # Force install iOS platform without version specification
        sudo xcodebuild -downloadPlatform iOS || echo "iOS platform download failed or already installed"
        sudo xcodebuild -downloadPlatform iOSSimulator || echo "iOS Simulator download failed or already installed"
        
        # Install runtime components for iOS 18.0 with specific version matching
        echo "Installing iOS 18.0 runtime components..."
        
        # Try multiple approaches to install matching iOS 18.0 simulator runtime
        sudo xcrun simctl runtime add iOS || echo "Runtime add failed or already installed"
        
        # Install specific iOS 18.0 runtime that matches SDK version 22A3362
        echo "Attempting to install specific iOS 18.0 runtime..."
        sudo xcrun simctl runtime add com.apple.CoreSimulator.SimRuntime.iOS-18-0 || echo "Specific iOS 18.0 runtime install failed"
        
        # List available runtimes to see what we have
        echo "Available simulator runtimes:"
        xcrun simctl runtime list
        
        # Try to download and install iOS 18.0 runtime if not available
        echo "Attempting to download iOS 18.0 runtime..."
        sudo xcrun simctl runtime add iOS --verbose || echo "Runtime download failed"
        
        # Install additional iOS versions as fallbacks
        echo "Installing fallback iOS platforms..."
        sudo xcodebuild -downloadPlatform iOS -version 17.5 || echo "iOS 17.5 download failed"
        sudo xcodebuild -downloadPlatform iOS -version 17.4 || echo "iOS 17.4 download failed"
        
        # Force acceptance of platform licenses
        sudo xcodebuild -license accept || echo "License already accepted"
        
        # Install additional Xcode components
        echo "Installing additional Xcode components..."
        sudo xcodebuild -downloadPlatform tvOS || echo "tvOS download failed"
        sudo xcodebuild -downloadPlatform watchOS || echo "watchOS download failed"
        sudo xcodebuild -installComponents || echo "Component installation failed or already installed"
        
        # Alternative platform installation using xcrun
        echo "Attempting xcrun platform installation..."
        sudo xcrun --install iphoneos || echo "xcrun platform install failed"
        
        # Force update Xcode command line tools
        echo "Updating Xcode command line tools..."
        sudo xcode-select --install || echo "Command line tools already installed"
        
        # Clean and rebuild Xcode caches
        echo "Cleaning Xcode caches..."
        rm -rf ~/Library/Caches/com.apple.dt.Xcode || echo "Cache cleanup failed"
        rm -rf ~/Library/Developer/Xcode/DerivedData || echo "DerivedData cleanup failed"
        
        # Extended wait for platform installation
        sleep 30
        
        # List all available platforms to verify installation
        echo "Available platforms after installation:"
        xcodebuild -showsdks
        
        # Check iOS device availability specifically
        echo "Checking iOS device availability..."
        xcodebuild -showdestinations -scheme ACCNeoX -project ACCNeoX.xcodeproj | grep -E "(iOS|platform)" || echo "iOS destinations check failed"
      
    - name: Verify Xcode project exists
      run: |
        # Skip XcodeGen generation - use the manually created project file from repo
        echo "Using manually created Xcode project file (compatible with Xcode 15.4)"
        
        # Verify project exists and is readable
        if [ -d "ACCNeoX.xcodeproj" ]; then
          echo "Project file exists:"
          ls -la ACCNeoX.xcodeproj/
          echo "Project file format check:"
          file ACCNeoX.xcodeproj/project.pbxproj
          
          # Check if project is readable
          echo "Testing project readability:"
          xcodebuild -project ACCNeoX.xcodeproj -list || echo "Project read failed"
        else
          echo "ERROR: ACCNeoX.xcodeproj not found!"
          exit 1
        fi
        
    - name: Create App Icons
      run: |
        # Create simple app icons using macOS built-in tools
        mkdir -p ACCNeoX/Assets.xcassets/AppIcon.appiconset/
        
        # Try ImageMagick first (fastest option)
        echo "Installing ImageMagick for icon generation..."
        brew install imagemagick || echo "ImageMagick install failed, trying alternative"
        
        # Verify ImageMagick installation
        if command -v magick >/dev/null 2>&1; then
          echo "ImageMagick available, creating icons..."
          # Create base 1024x1024 orange icon
          magick -size 1024x1024 xc:"#FF8C00" ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-1024.png
          
          # Create all required sizes
          magick ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-1024.png -resize 120x120 ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-60@2x.png
          magick ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-1024.png -resize 180x180 ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-60@3x.png
          magick ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-1024.png -resize 152x152 ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-76@2x.png
          magick ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-1024.png -resize 167x167 ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-83.5@2x.png
        else
          echo "ImageMagick not available, skipping custom icon generation"
          echo "App will build with Xcode default icons"
        fi
        
        echo "App icon setup completed"
        ls -la ACCNeoX/Assets.xcassets/AppIcon.appiconset/ || echo "No custom icons created"
      
    - name: Create Keychain
      run: |
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
    - name: Import Apple Distribution Certificate
      run: |
        echo "${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        
    - name: Import Provisioning Profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
        
    - name: Debug Provisioning Profile
      run: |
        echo "Checking provisioning profile details..."
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | plutil -p -
        echo "Available provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
    - name: List available schemes
      run: xcodebuild -project ACCNeoX.xcodeproj -list
        
    - name: List available destinations
      run: |
        echo "Available destinations:"
        xcodebuild -project ACCNeoX.xcodeproj -scheme ACCNeoX -showdestinations
        
    - name: List available SDKs
      run: |
        echo "Available SDKs:"
        xcodebuild -showsdks
        
    - name: Build iOS App with Programmatic UI
      run: |
        mkdir -p build
        
        echo "🔧 Pre-build setup for programmatic UI..."
        
        # Clear build caches 
        rm -rf ~/Library/Caches/com.apple.dt.Xcode || echo "Xcode cache cleanup failed"
        rm -rf ~/Library/Developer/Xcode/DerivedData/ACCNeoX* || echo "Project cache cleanup failed"
        
        # Verify no storyboard files exist (should all be removed)
        echo "Verifying storyboard removal..."
        if [ -f "ACCNeoX/Base.lproj/Main.storyboard" ]; then
          echo "ERROR: Main.storyboard still exists!"
          exit 1
        fi
        if [ -f "ACCNeoX/Base.lproj/LaunchScreen.storyboard" ]; then
          echo "ERROR: LaunchScreen.storyboard still exists!"
          exit 1
        fi
        echo "✅ Confirmed: All storyboards removed - using programmatic UI"
        
        # Find an iOS SDK that's actually installed (avoid iOS 18.0 if not installed)
        AVAILABLE_SDKS=$(xcodebuild -showsdks | grep iphoneos | awk '{print $NF}')
        echo "Available iOS SDKs:"
        echo "$AVAILABLE_SDKS"
        
        # Try to find the best available SDK for App Store submission
        LATEST_IOS_SDK=$(echo "$AVAILABLE_SDKS" | grep -E "iphoneos18\." | tail -1)
        if [ -z "$LATEST_IOS_SDK" ]; then
          # Try iOS 17.x if 18.x not available
          LATEST_IOS_SDK=$(echo "$AVAILABLE_SDKS" | grep -E "iphoneos17\." | tail -1)
        fi
        if [ -z "$LATEST_IOS_SDK" ]; then
          # Use latest available as fallback
          LATEST_IOS_SDK=$(echo "$AVAILABLE_SDKS" | tail -1)
          echo "Warning: Using $LATEST_IOS_SDK - may not meet App Store requirements"
        fi
        
        # Extract just the version number for validation
        IOS_SDK_VERSION=$(echo "$LATEST_IOS_SDK" | sed 's/iphoneos//')
        echo "Selected iOS SDK version: $IOS_SDK_VERSION"
        
        # Warn if SDK version might not meet App Store requirements
        if [[ "$IOS_SDK_VERSION" < "18.0" ]]; then
          echo "⚠️  WARNING: Using iOS SDK $IOS_SDK_VERSION which may not meet App Store submission requirements (iOS 18+ required)"
          echo "App may build successfully but fail App Store validation"
        fi
        echo "Using iOS SDK: $LATEST_IOS_SDK"
        
        # List available destinations for debugging
        echo "Available build destinations:"
        xcodebuild -project ACCNeoX.xcodeproj -scheme ACCNeoX -showdestinations | head -20
        
        # Attempt to build with the selected SDK
        echo "Starting build with $LATEST_IOS_SDK..."
        BUILD_SUCCESS=false
        
        # Check if destinations are available and try different build approaches
        DESTINATIONS_AVAILABLE=false
        if xcodebuild -project ACCNeoX.xcodeproj -scheme ACCNeoX -showdestinations | grep -q "Any iOS Device"; then
          DESTINATIONS_AVAILABLE=true
          echo "✅ iOS device destinations are available"
        else
          echo "⚠️  No iOS device destinations available - using generic destination"
        fi
        
        # Enhanced build command with strict iPhone-only asset catalog compilation
        BUILD_CMD="xcodebuild \
          -project ACCNeoX.xcodeproj \
          -scheme ACCNeoX \
          -configuration Release \
          -sdk \"$LATEST_IOS_SDK\" \
          -archivePath $PWD/build/ACCNeoX.xcarchive \
          PROVISIONING_PROFILE_SPECIFIER=\"${{ secrets.PROVISIONING_PROFILE_NAME }}\" \
          CODE_SIGN_IDENTITY=\"${{ secrets.CODE_SIGN_IDENTITY }}\" \
          DEVELOPMENT_TEAM=\"${{ secrets.DEVELOPMENT_TEAM }}\" \
          CODE_SIGN_STYLE=Manual \
          ONLY_ACTIVE_ARCH=NO \
          IPHONEOS_DEPLOYMENT_TARGET=14.0 \
          SKIP_INSTALL=NO \
          BUILD_LIBRARY_FOR_DISTRIBUTION=NO \
          TARGETED_DEVICE_FAMILY=1 \
          ENABLE_PREVIEWS=NO \
          SUPPORTS_MACCATALYST=NO \
          SUPPORTS_MAC_DESIGNED_FOR_IPHONE_IPAD=NO"
        
        # Always add destination parameter for iOS device builds
        BUILD_CMD="$BUILD_CMD -destination \"generic/platform=iOS\" archive"
        
        echo "Executing build command: $BUILD_CMD"
        if eval $BUILD_CMD; then
          BUILD_SUCCESS=true
          echo "✅ Build succeeded with $LATEST_IOS_SDK"
        else
          echo "❌ Build failed with $LATEST_IOS_SDK"
          echo "📋 Checking build log for platform installation issues..."
          
          # Try with alternative SDKs in order of preference
          ALL_IOS_SDKS=($(xcodebuild -showsdks | grep iphoneos | awk '{print $NF}'))
          echo "All available iOS SDKs: ${ALL_IOS_SDKS[@]}"
          
          # Try each available SDK until one works
          for SDK in "${ALL_IOS_SDKS[@]}"; do
            if [ "$SDK" != "$LATEST_IOS_SDK" ]; then
              echo "🔄 Trying fallback SDK: $SDK"
              
              # Build fallback command with strict iPhone-only targeting
              FALLBACK_BUILD_CMD="xcodebuild \
                -project ACCNeoX.xcodeproj \
                -scheme ACCNeoX \
                -configuration Release \
                -sdk \"$SDK\" \
                -archivePath $PWD/build/ACCNeoX.xcarchive \
                PROVISIONING_PROFILE_SPECIFIER=\"${{ secrets.PROVISIONING_PROFILE_NAME }}\" \
                CODE_SIGN_IDENTITY=\"${{ secrets.CODE_SIGN_IDENTITY }}\" \
                DEVELOPMENT_TEAM=\"${{ secrets.DEVELOPMENT_TEAM }}\" \
                CODE_SIGN_STYLE=Manual \
                ONLY_ACTIVE_ARCH=NO \
                IPHONEOS_DEPLOYMENT_TARGET=14.0 \
                SKIP_INSTALL=NO \
                BUILD_LIBRARY_FOR_DISTRIBUTION=NO \
                TARGETED_DEVICE_FAMILY=1 \
                ENABLE_PREVIEWS=NO \
                SUPPORTS_MACCATALYST=NO \
                SUPPORTS_MAC_DESIGNED_FOR_IPHONE_IPAD=NO"
              
              # Always add destination parameter for iOS device builds  
              FALLBACK_BUILD_CMD="$FALLBACK_BUILD_CMD -destination \"generic/platform=iOS\" archive"
              
              if eval $FALLBACK_BUILD_CMD; then
                BUILD_SUCCESS=true
                echo "✅ Build succeeded with fallback SDK $SDK"
                break
              else
                echo "❌ Build also failed with $SDK, trying next..."
              fi
            fi
          done
          
          if [ "$BUILD_SUCCESS" = false ]; then
            echo "💥 Build failed with all available iOS SDKs: ${ALL_IOS_SDKS[@]}"
            echo "🔍 Checking for platform installation and build tool issues..."
            
            # Debug build tools availability
            echo "Checking Xcode build tools:"
            which xcodebuild || echo "xcodebuild not found"
            which xcrun || echo "xcrun not found"
            
            # Check platform installation
            echo "Platform installation status:"
            xcodebuild -showsdks | grep iphoneos || echo "No iOS SDKs detected"
            
            # List all Xcode tools for debugging
            echo "Available Xcode tools:"
            ls -la $(xcode-select -p)/usr/bin/ | grep -E "(xcodebuild|xcrun|actool|copypng)" || echo "Critical Xcode tools missing"
            
            exit 1
          fi
        fi
          
    - name: Export IPA
      run: |
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.DEVELOPMENT_TEAM }}</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>net.acloudradius.neox</key>
                <string>${{ secrets.PROVISIONING_PROFILE_NAME }}</string>
            </dict>
            <key>signingStyle</key>
            <string>manual</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        xcodebuild \
          -exportArchive \
          -archivePath $PWD/build/ACCNeoX.xcarchive \
          -exportOptionsPlist ExportOptions.plist \
          -exportPath $PWD/build
          
    - name: Upload to TestFlight
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.DEVELOPMENT_TEAM }}
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file build/ACCNeoX.ipa \
          --username "$APPLE_ID" \
          --password "$APPLE_APP_SPECIFIC_PASSWORD" \
          --asc-provider "$APPLE_TEAM_ID"
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          build/ACCNeoX.ipa
          build/ACCNeoX.xcarchive
      if: always()
      
    - name: Clean up keychain
      run: |
        if security list-keychains | grep -q "build.keychain"; then
          security delete-keychain build.keychain
          echo "Keychain deleted"
        else
          echo "Keychain not found - already cleaned up"
        fi
      if: always()