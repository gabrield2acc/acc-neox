name: iOS Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  XCODE_VERSION: '16.0'
  
jobs:
  build-and-deploy:
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: |
        sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer || \
        sudo xcode-select -s /Applications/Xcode_16.app/Contents/Developer || \
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
      
    - name: Show Xcode version
      run: xcodebuild -version
      
    - name: Install XcodeGen
      run: |
        brew install xcodegen
        
    - name: Generate Xcode project
      run: |
        xcodegen generate
        
    - name: Create App Icons
      run: |
        # Create app icons using ImageMagick or sips
        mkdir -p ACCNeoX/Assets.xcassets/AppIcon.appiconset/
        
        # Create a simple orange icon with "nX" text
        cat > create_icon.py << 'EOF'
        import os
        from PIL import Image, ImageDraw, ImageFont
        
        def create_icon(size, filename):
            # Create image with orange background
            img = Image.new('RGB', (size, size), color='#FF8C00')
            draw = ImageDraw.Draw(img)
            
            # Try to use a system font, fallback to default
            try:
                font_size = max(size // 3, 12)
                font = ImageFont.load_default()
            except:
                font = ImageFont.load_default()
            
            # Draw "nX" text in center
            text = "nX"
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            x = (size - text_width) // 2
            y = (size - text_height) // 2
            
            draw.text((x, y), text, fill='white', font=font)
            
            # Save icon
            img.save(f'ACCNeoX/Assets.xcassets/AppIcon.appiconset/{filename}')
            print(f'Created {filename} ({size}x{size})')
        
        # Create required icon sizes
        create_icon(120, 'icon-60@2x.png')      # 60pt @2x = 120px
        create_icon(180, 'icon-60@3x.png')      # 60pt @3x = 180px  
        create_icon(152, 'icon-76@2x.png')      # 76pt @2x = 152px
        create_icon(167, 'icon-83.5@2x.png')    # 83.5pt @2x = 167px
        create_icon(1024, 'icon-1024.png')      # 1024px for App Store
        EOF
        
        # Install PIL and create icons
        python3 -m pip install Pillow
        python3 create_icon.py
      
    - name: Create Keychain
      run: |
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
    - name: Import Apple Distribution Certificate
      run: |
        echo "${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        
    - name: Import Provisioning Profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
        
    - name: Debug Provisioning Profile
      run: |
        echo "Checking provisioning profile details..."
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | plutil -p -
        echo "Available provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
    - name: List available schemes
      run: xcodebuild -project ACCNeoX.xcodeproj -list
        
    - name: Build iOS App
      run: |
        mkdir -p build
        xcodebuild \
          -project ACCNeoX.xcodeproj \
          -scheme ACCNeoX \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $PWD/build/ACCNeoX.xcarchive \
          PROVISIONING_PROFILE_SPECIFIER="${{ secrets.PROVISIONING_PROFILE_NAME }}" \
          CODE_SIGN_IDENTITY="${{ secrets.CODE_SIGN_IDENTITY }}" \
          DEVELOPMENT_TEAM="${{ secrets.DEVELOPMENT_TEAM }}" \
          CODE_SIGN_STYLE=Manual \
          archive
          
    - name: Export IPA
      run: |
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.DEVELOPMENT_TEAM }}</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>net.acloudradius.neox</key>
                <string>${{ secrets.PROVISIONING_PROFILE_NAME }}</string>
            </dict>
            <key>signingStyle</key>
            <string>manual</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        xcodebuild \
          -exportArchive \
          -archivePath $PWD/build/ACCNeoX.xcarchive \
          -exportOptionsPlist ExportOptions.plist \
          -exportPath $PWD/build
          
    - name: Upload to TestFlight
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.DEVELOPMENT_TEAM }}
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file build/ACCNeoX.ipa \
          --username "$APPLE_ID" \
          --password "$APPLE_APP_SPECIFIC_PASSWORD" \
          --asc-provider "$APPLE_TEAM_ID"
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          build/ACCNeoX.ipa
          build/ACCNeoX.xcarchive
      if: always()
      
    - name: Clean up keychain
      run: security delete-keychain build.keychain
      if: always()