name: iOS Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  XCODE_VERSION: '16.0'
  
jobs:
  build-and-deploy:
    runs-on: macos-15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: |
        # List available Xcode versions first
        echo "Available Xcode versions:"
        ls -la /Applications/Xcode*.app 2>/dev/null || echo "No Xcode versions found"
        
        # Use Xcode 16 for iOS 18 SDK requirement
        if [ -d "/Applications/Xcode_16.0.app" ]; then
          echo "Using Xcode 16.0"
          sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
        elif [ -d "/Applications/Xcode_16.1.app" ]; then
          echo "Using Xcode 16.1"
          sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
        elif [ -d "/Applications/Xcode_16.app" ]; then
          echo "Using Xcode 16"
          sudo xcode-select -s /Applications/Xcode_16.app/Contents/Developer
        else
          echo "Using default Xcode (should be Xcode 16+ on macos-15)"
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        fi
      
    - name: Show Xcode version
      run: xcodebuild -version
      
    - name: Verify Xcode project exists
      run: |
        # Skip XcodeGen generation - use the manually created project file from repo
        echo "Using manually created Xcode project file (compatible with Xcode 15.4)"
        
        # Verify project exists and is readable
        if [ -d "ACCNeoX.xcodeproj" ]; then
          echo "Project file exists:"
          ls -la ACCNeoX.xcodeproj/
          echo "Project file format check:"
          file ACCNeoX.xcodeproj/project.pbxproj
          
          # Check if project is readable
          echo "Testing project readability:"
          xcodebuild -project ACCNeoX.xcodeproj -list || echo "Project read failed"
        else
          echo "ERROR: ACCNeoX.xcodeproj not found!"
          exit 1
        fi
        
    - name: Create App Icons
      run: |
        # Create simple app icons using macOS built-in tools
        mkdir -p ACCNeoX/Assets.xcassets/AppIcon.appiconset/
        
        # Create a simple orange square using ImageMagick (available via brew)
        brew install imagemagick
        
        # Create base 1024x1024 orange icon
        magick -size 1024x1024 xc:"#FF8C00" ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-1024.png
        
        # Create all required sizes
        magick ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-1024.png -resize 120x120 ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-60@2x.png
        magick ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-1024.png -resize 180x180 ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-60@3x.png
        magick ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-1024.png -resize 152x152 ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-76@2x.png
        magick ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-1024.png -resize 167x167 ACCNeoX/Assets.xcassets/AppIcon.appiconset/icon-83.5@2x.png
        
        echo "Created all required app icons:"
        ls -la ACCNeoX/Assets.xcassets/AppIcon.appiconset/
      
    - name: Create Keychain
      run: |
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
    - name: Import Apple Distribution Certificate
      run: |
        echo "${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        
    - name: Import Provisioning Profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
        
    - name: Debug Provisioning Profile
      run: |
        echo "Checking provisioning profile details..."
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | plutil -p -
        echo "Available provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
    - name: List available schemes
      run: xcodebuild -project ACCNeoX.xcodeproj -list
        
    - name: List available destinations
      run: |
        echo "Available destinations:"
        xcodebuild -project ACCNeoX.xcodeproj -scheme ACCNeoX -showdestinations
        
    - name: List available SDKs
      run: |
        echo "Available SDKs:"
        xcodebuild -showsdks
        
    - name: Build iOS App
      run: |
        mkdir -p build
        
        # Find an iOS SDK that's actually installed (avoid iOS 18.0 if not installed)
        AVAILABLE_SDKS=$(xcodebuild -showsdks | grep iphoneos | awk '{print $NF}')
        echo "Available iOS SDKs:"
        echo "$AVAILABLE_SDKS"
        
        # Prefer iOS 18.x SDK as required by App Store, fallback to latest available
        LATEST_IOS_SDK=$(echo "$AVAILABLE_SDKS" | grep -E "iphoneos18\." | tail -1)
        if [ -z "$LATEST_IOS_SDK" ]; then
          echo "Warning: iOS 18.x SDK not found, using latest available"
          LATEST_IOS_SDK=$(echo "$AVAILABLE_SDKS" | tail -1)
        fi
        echo "Using iOS SDK: $LATEST_IOS_SDK"
        
        # List available destinations for debugging
        echo "Available build destinations:"
        xcodebuild -project ACCNeoX.xcodeproj -scheme ACCNeoX -showdestinations | head -20
        
        # Build with explicit SDK and destination
        xcodebuild \
          -project ACCNeoX.xcodeproj \
          -scheme ACCNeoX \
          -configuration Release \
          -sdk "$LATEST_IOS_SDK" \
          -archivePath $PWD/build/ACCNeoX.xcarchive \
          PROVISIONING_PROFILE_SPECIFIER="${{ secrets.PROVISIONING_PROFILE_NAME }}" \
          CODE_SIGN_IDENTITY="${{ secrets.CODE_SIGN_IDENTITY }}" \
          DEVELOPMENT_TEAM="${{ secrets.DEVELOPMENT_TEAM }}" \
          CODE_SIGN_STYLE=Manual \
          ONLY_ACTIVE_ARCH=NO \
          IPHONEOS_DEPLOYMENT_TARGET=14.0 \
          archive
          
    - name: Export IPA
      run: |
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.DEVELOPMENT_TEAM }}</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>net.acloudradius.neox</key>
                <string>${{ secrets.PROVISIONING_PROFILE_NAME }}</string>
            </dict>
            <key>signingStyle</key>
            <string>manual</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        xcodebuild \
          -exportArchive \
          -archivePath $PWD/build/ACCNeoX.xcarchive \
          -exportOptionsPlist ExportOptions.plist \
          -exportPath $PWD/build
          
    - name: Upload to TestFlight
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.DEVELOPMENT_TEAM }}
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file build/ACCNeoX.ipa \
          --username "$APPLE_ID" \
          --password "$APPLE_APP_SPECIFIC_PASSWORD" \
          --asc-provider "$APPLE_TEAM_ID"
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          build/ACCNeoX.ipa
          build/ACCNeoX.xcarchive
      if: always()
      
    - name: Clean up keychain
      run: |
        if security list-keychains | grep -q "build.keychain"; then
          security delete-keychain build.keychain
          echo "Keychain deleted"
        else
          echo "Keychain not found - already cleaned up"
        fi
      if: always()